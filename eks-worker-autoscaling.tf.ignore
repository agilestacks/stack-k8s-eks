# https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html
# https://aws.amazon.com/blogs/opensource/improvements-eks-worker-node-provisioning/
data "aws_ami" "eks_worker" {
  filter {
    name   = "name"
    values = ["amazon-eks-${local.worker_instance_gpu ? "gpu-" : ""}node-${local.version}-*"]
  }

  most_recent = true
  owners      = ["amazon"]
}

# https://amazon-eks.s3-us-west-2.amazonaws.com/cloudformation/2019-10-08/amazon-eks-nodegroup.yaml
locals {
  userdata = <<USERDATA
#!/bin/sh
exec /etc/eks/bootstrap.sh ${var.cluster_name}
USERDATA

}

resource "aws_launch_configuration" "node" {
  associate_public_ip_address = true
  iam_instance_profile        = aws_iam_instance_profile.node.name
  image_id                    = data.aws_ami.eks_worker.id
  instance_type               = var.worker_instance_type
  key_name                    = var.keypair
  name_prefix                 = "eks-node-${local.name2}"
  security_groups             = [aws_security_group.node.id]
  spot_price                  = var.worker_spot_price
  user_data_base64            = base64encode(local.userdata)

  lifecycle {
    create_before_destroy = true
    ignore_changes        = [image_id]
  }

  root_block_device {
    volume_type = var.worker_root_volume_type
    volume_size = var.worker_root_volume_size
    iops        = var.worker_root_volume_type == "io1" ? var.worker_root_volume_iops : 0
  }
}

resource "aws_autoscaling_group" "nodes" {
  name = "eks-node-${local.name2}"

  vpc_zone_identifier  = aws_subnet.nodes.*.id
  launch_configuration = aws_launch_configuration.node.id
  desired_capacity     = var.worker_count
  min_size             = 1
  max_size             = var.worker_max_count

  depends_on = [aws_eks_cluster.main]

  tag {
    key                 = "Name"
    value               = "eks-node-${local.name2}"
    propagate_at_launch = true
  }
  tag {
    key                 = "kubernetes.io/cluster/${var.cluster_name}"
    value               = "owned"
    propagate_at_launch = true
  }
  tag {
    key                 = "k8s.io/cluster-autoscaler/enabled"
    value               = "true"
    propagate_at_launch = true
  }
}
